@page "/windows"
@using WindowStore.Client.Pages.Dialogs
@using WindowStore.Client.Services
@using WindowStore.Shared
@using WindowStore.Shared.Window

<PageTitle>Windows</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Windows</MudText>
<MudText Class="mb-8">This component allows to add and remove windows from the storage. Notice, that it's possible to remove the window if there are no orders with the ordered window you intended to remove.'.</MudText>
@if (windows == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="windows" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WindowDTO, object>(x=>x.WindowName)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WindowDTO, object>(x=>x.QuantityOfWindows)">QuantityOfWindows</MudTableSortLabel></MudTh>
            <MudTh><MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Add" OnClick="@AddWindow">New window</MudButton></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.WindowName</MudTd>
                <MudTd DataLabel="QuantityOfWindows">@context.QuantityOfWindows</MudTd>
                <MudTd><MudIconButton OnClick="@((e) => DeleteWindow(context))" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton></MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{5, 10}" />
            </PagerContent>
        </MudTable>
}


@code {
    @inject IWindowServiceClient _windowService;

    @inject IDialogService DialogService

    @inject ISnackbar Snackbar

    private List<WindowDTO>? windows;

    protected override async Task OnInitializedAsync()
    {
        windows = await _windowService.GetWindowsAsync();
    }
    async Task AddWindow()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<AddNewWindow_Dialog>("Add new window", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data is WindowDTO newWindow)
            {
                windows?.Add(newWindow);
            }
        }
    }

    async Task DeleteWindow(WindowDTO window)
    {
        var count = await _windowService.GetOrdersCountByWindowIdAsync(window.WindowId);

        if (count > 0)
        {
            Snackbar.Add($"Window {window.WindowName} can't be deleted due to {count} orders reference to it!", Severity.Error);
        }
        else
        {
            var result = await _windowService.RemoveWindowAsync(window.WindowId);
            if (result)
            {
                windows.RemoveAll(w => w.WindowId == window.WindowId);
            }
        }
    }
}
